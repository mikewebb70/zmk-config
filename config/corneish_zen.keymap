

/*                              36 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ 30  31  32 │ 33  34  35 ╭───────╯ ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
          ╰────────────┴────────────╯                 ╰─────────────┴─────────────╯             */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

#define DEFAULT 0
#define NUM 1 
#define SYM 2
#define SYS 3


/* use 5-column layout for Zen */
/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/* Custom Behaviors , Require UROB ZMK patches */

// Conditional layer Hold both NUM and SYM layer key to activate SYS layer
ZMK_CONDITIONAL_LAYER(NUM SYM, SYS)

// [Home Row Mods]
ZMK_BEHAVIOR(hm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap-ms = <150>; 
    bindings = <&kp>, <&kp>;
  )

// [ Mod Morphing definitions]

// tap: backspace | ralt + tap: delete | hold: sym layer
ZMK_BEHAVIOR(bspcdel, mod_morph,
    label = "BSPC_DELETE";
    bindings = <&lt SYM BSPC>, <&kp DEL>;
    mods = <(MOD_RALT|MOD_LALT)>;
  )

// tap: Q | ralt + tap: ~  
ZMK_BEHAVIOR(tildq, mod_morph,
    label = "TILDA_Q";
    bindings = <&kp Q>, <&kp TILDE>;
    mods = <(MOD_RALT|MOD_LALT)>;
  ) 

// tap: J | ralt + tap: down arrow | hold: RGUI 
ZMK_BEHAVIOR(downj, mod_morph,
    label = "DOWNARROW_J";
    bindings = <&hm RGUI J>, <&kp DOWN>;
    mods = <(MOD_RALT|MOD_LALT)>;
  ) 

// tap: J | ralt + tap: down arrow | hold: RGUI 
ZMK_BEHAVIOR(upk, mod_morph,
    label = "UPARROW_K";
    bindings = <&hm RALT K>, <&kp UP>;
    mods = <(MOD_RALT|MOD_LALT)>;
  )

// tap: L | ralt + tap: right arrow | hold: RCTL 
ZMK_BEHAVIOR(rightl, mod_morph,
    label = "RIGHTARROW_L";
    bindings = <&hm RCTRL L>, <&kp RIGHT>;
    mods = <(MOD_RALT|MOD_LALT)>;
  ) 

// tap: H | ralt + tap: left arrow  
ZMK_BEHAVIOR(lefth, mod_morph,
    label = "LEFTARROW_H";
    bindings = <&kp H>, <&kp LEFT>;
    mods = <(MOD_RALT|MOD_LALT)>;
  )

// tap: ; | ralt + tap: ' | shift + tap: : | double tap: " 
ZMK_BEHAVIOR(megapinky, mod_morph,
   label = "MEGA_PINKY";
   bindings = <&q_quote>, <&kp APOS>;
   mods = <(MOD_RALT|MOD_LALT)>;
  )
 
// [ Num_Word (like CAPS-WORDS) ]
&num_word {
   label = "NUM_WORD";
   layers = <NUM>;                                
   continue-list = <BACKSPACE DELETE DOT COMMA COLON UNDERSCORE>; 
   ignore-numbers;                                
};

// [ Tap dance definitions ]

// SUPER_SHIFT tap: RETURN | hold: RSHIFT | double-tap: CAPS_WORD 
ZMK_BEHAVIOR(s_shift, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&mt RSHFT RET>, <&caps_word>;
  )

// Sticky GUI tap: PLUS | hold:LGUI | double-tap: Sticky LGUI
ZMK_BEHAVIOR(sk_gui, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&hm LGUI  PLUS>, <&sk LGUI>;
  )

// Quick Quotes tap: SEMI | hold: RSHIFT | double-tap: Double Quotes 
ZMK_BEHAVIOR(q_quote, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&hm RSHFT SEMI>, <&kp DQT>;
  )

// Num Num tap: TAB | hold: NUM Layer | double-tap: &num_word 
ZMK_BEHAVIOR(num_num, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&lt NUM TAB>, <&num_word>;
  )

/* Key Mapping */

ZMK_LAYER(QWERTY,
// ╭──────────────┬─────────────┬─────────────┬─────────────┬─────────────╮      ╭─────────────┬─────────────┬──────────────┬─────────────┬─────────────╮
// │    Q (~)     │      W      │    E        │    R        │    T        │      │    Y        │    U        │    I         │    O        │    P        │
      &tildq           &kp W        &kp E         &kp R         &kp T                &kp Y         &kp U         &kp I          &kp O         &kp P      
// ├──────────────┼─────────────┼─────────────┼─────────────┼─────────────┤      ├─────────────┼─────────────┼──────────────┼─────────────┼─────────────┤
// │    A         │    S        │    D        │    F        │    G        │      │ H/(←)       │ J/RGUI/(↓)  │ K/RALT/(↑)   │ L/RCTRL/(→) │ ;/:/["]/(') │
     &hm LSHFT A     &hm LCTRL S  &hm LALT D    &hm LGUI F      &kp G                &lefth      &downj         &upk          &rightl       &megapinky      
// ├──────────────┼─────────────┼─────────────┼─────────────┼─────────────┤      ├─────────────┼─────────────┼──────────────┼─────────────┼─────────────┤
// │    Z         │    X        │    C        │    V        │    B        │      │    N        │    M        │    , <       │    . >      │    / ?      │
       &kp Z         &kp X         &kp C         &kp V         &kp B                 &kp N         &kp M         &kp COMMA      &kp DOT       &kp FSLH   
// ╰──────────────┴─────────────├─────────────┼─────────────┼─────────────┤      ├─────────────┼─────────────┼──────────────┼─────────────┴─────────────╯
//                              │  ESC/GUI     TAB/NUM/(NW) │    SPC      │      │ENT/SHFT/(CW)│BSP/SYM/[DEL]│    CTRL      │
                                  &mt LGUI ESC   &num_num      &kp SPACE             &s_shift    &bspcdel       &kp RCTRL    
//                              ╰─────────────┴─────────────┴─────────────╯      ╰─────────────┴─────────────┴──────────────╯
)

ZMK_LAYER(NUMBER,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
// │    1 !      │     2 @     │    3 #      │      4 $    │    5        │       │     6       │     7       │     8       │     9       │    0        │
     &kp N1         &kp N2        &kp N3          &kp N4       &kp N5                  &kp N6       &kp N7        &kp N8        &kp N9      &kp N0 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │             │             │             │+/LGUI/[LGUI]│    -        │       │     .       │     4       │     5       │     6       │   :         │
     &sk LSHIFT    &trans       &sk LG(LSHIFT)   &sk_gui      &kp MINUS             &kp DOT      &hm RGUI N4   &hm RALT N5   &hm RALT N6 &hm RSHFT COLON 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │  UNDO/bg%   │  CUT        │ COPY/SIGINIT   PASTE      │    _        │       │     0       │     1       │     2       │     3       │             │
      &kp LC(Z)     &kp LC(X)     &kp LC(C)    &kp LC(V)      &kp UNDER              &kp N0        &kp N1       &kp N2        &kp N3       &trans
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                             │             │             │             │       │             │             │             │                            
                                  &trans         &trans       &trans                &trans        &trans        &trans
//                             ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(SYMBOL,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬──────────────┬────────────╮
// │  !          │  @          │  #          │  $          │  %          │       │  ^          │  &          │  (          │  )           │  )         │
      &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT             &kp CARET     &kp AMPS     &kp LPAR       &kp RPAR       &kp RPAR    
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────│       ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┤
// │             │             │             │     "       │    *        │       │  ─          │  =          │  [          │  ]           │  "|"       │
      &trans        &trans        &trans      &hm LGUI DQT    &kp ASTRK             &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT       &kp PIPE 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────│       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │             │             │             │             │             │       │  ─          │  +          │  {          │  }          │    \        │
      &trans        &trans        &trans        &trans        &trans                &kp UNDER     &kp PLUS      &kp LBRC      &kp RBRC      &kp BSLH    
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────│       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                             │             │             │             │       │             │             │             │                            
                                  &trans         &trans        &trans                &trans        &trans        &trans
//                             ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(SYSTEM,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
// │             │             │             │             │             │       │             │             │             │             │             │
     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                 &kp F6      &kp F7        &kp F8        &kp F9        &kp F10
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │             │             │             │             │  BT clear   │       │   CPREV     │ PLAY/PAUSE  │   NEXT      │    STOP     │    VOL UP   │
      &trans         &trans        &trans       &trans        &bt BT_CLR             &kp C_PREV     &kp C_PP     &kp C_NEXT   &kp C_STOP   &kp C_VOL_UP
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
// │ BT0         │    BT1      │   BT2       │  BT3        │  BT4        │       │             │             │             │    MUTE     │   VOL UP    │
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4              &trans      &trans      &trans        &kp C_MUTE     &kp C_VOL_DN 
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
//                             │             │             │             │       │             │             │             │                            
                                  &trans         &trans       &trans                &trans        &trans        &trans
//                             ╰─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────╯
)
